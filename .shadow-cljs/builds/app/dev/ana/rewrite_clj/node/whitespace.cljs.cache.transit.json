["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.whitespace');\r\n/**\r\n * This function is applied to every newline string.\r\n */\r\nrewrite_clj.node.whitespace._STAR_newline_fn_STAR_ = cljs.core.identity;\r\n/**\r\n * This function is applied to every newline string and should produce\r\n * the eventual character count.\r\n */\r\nrewrite_clj.node.whitespace._STAR_count_fn_STAR_ = cljs.core.count;\r\n\r\n/**\r\n* @constructor\r\n * @implements {cljs.core.IRecord}\r\n * @implements {cljs.core.IKVReduce}\r\n * @implements {cljs.core.IEquiv}\r\n * @implements {cljs.core.IHash}\r\n * @implements {cljs.core.ICollection}\r\n * @implements {cljs.core.ICounted}\r\n * @implements {cljs.core.ISeqable}\r\n * @implements {cljs.core.IMeta}\r\n * @implements {cljs.core.ICloneable}\r\n * @implements {cljs.core.IPrintWithWriter}\r\n * @implements {cljs.core.IIterable}\r\n * @implements {rewrite_clj.node.protocols.Node}\r\n * @implements {cljs.core.IWithMeta}\r\n * @implements {cljs.core.IAssociative}\r\n * @implements {cljs.core.IMap}\r\n * @implements {cljs.core.ILookup}\r\n*/\r\nrewrite_clj.node.whitespace.WhitespaceNode = (function (whitespace,__meta,__extmap,__hash){\r\nthis.whitespace = whitespace;\r\nthis.__meta = __meta;\r\nthis.__extmap = __extmap;\r\nthis.__hash = __hash;\r\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\r\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\r\n});\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.toString = (function (){\r\nvar self__ = this;\r\nvar this$ = this;\r\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4380__auto__,k__4381__auto__){\r\nvar self__ = this;\r\nvar this__4380__auto____$1 = this;\r\nreturn this__4380__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4381__auto__,null);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4382__auto__,k67127,else__4383__auto__){\r\nvar self__ = this;\r\nvar this__4382__auto____$1 = this;\r\nvar G__67134 = k67127;\r\nvar G__67134__$1 = (((G__67134 instanceof cljs.core.Keyword))?G__67134.fqn:null);\r\nswitch (G__67134__$1) {\r\ncase \"whitespace\":\r\nreturn self__.whitespace;\r\n\r\nbreak;\r\ndefault:\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k67127,else__4383__auto__);\r\n\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4399__auto__,f__4400__auto__,init__4401__auto__){\r\nvar self__ = this;\r\nvar this__4399__auto____$1 = this;\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4402__auto__,p__67135){\r\nvar vec__67137 = p__67135;\r\nvar k__4403__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67137,(0),null);\r\nvar v__4404__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67137,(1),null);\r\nreturn (f__4400__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4400__auto__.cljs$core$IFn$_invoke$arity$3(ret__4402__auto__,k__4403__auto__,v__4404__auto__) : f__4400__auto__.call(null,ret__4402__auto__,k__4403__auto__,v__4404__auto__));\r\n}),init__4401__auto__,this__4399__auto____$1);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4394__auto__,writer__4395__auto__,opts__4396__auto__){\r\nvar self__ = this;\r\nvar this__4394__auto____$1 = this;\r\nvar pr_pair__4397__auto__ = (function (keyval__4398__auto__){\r\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4396__auto__,keyval__4398__auto__);\r\n});\r\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,pr_pair__4397__auto__,\"#rewrite-clj.node.whitespace.WhitespaceNode{\",\", \",\"}\",opts__4396__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace],null))], null),self__.__extmap));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__67126){\r\nvar self__ = this;\r\nvar G__67126__$1 = this;\r\nreturn (new cljs.core.RecordIter((0),G__67126__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4378__auto__){\r\nvar self__ = this;\r\nvar this__4378__auto____$1 = this;\r\nreturn self__.__meta;\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4375__auto__){\r\nvar self__ = this;\r\nvar this__4375__auto____$1 = this;\r\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,self__.__extmap,self__.__hash));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4384__auto__){\r\nvar self__ = this;\r\nvar this__4384__auto____$1 = this;\r\nreturn (1 + cljs.core.count(self__.__extmap));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4376__auto__){\r\nvar self__ = this;\r\nvar this__4376__auto____$1 = this;\r\nvar h__4238__auto__ = self__.__hash;\r\nif((!((h__4238__auto__ == null)))){\r\nreturn h__4238__auto__;\r\n} else {\r\nvar h__4238__auto____$1 = (function (coll__4377__auto__){\r\nreturn (1595850179 ^ cljs.core.hash_unordered_coll(coll__4377__auto__));\r\n})(this__4376__auto____$1);\r\n(self__.__hash = h__4238__auto____$1);\r\n\r\nreturn h__4238__auto____$1;\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this67128,other67129){\r\nvar self__ = this;\r\nvar this67128__$1 = this;\r\nreturn (((!((other67129 == null)))) && ((this67128__$1.constructor === other67129.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this67128__$1.whitespace,other67129.whitespace)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this67128__$1.__extmap,other67129.__extmap)));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn true;\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nthrow (new Error(\"Unsupported operation\"));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn cljs.core.count(self__.whitespace);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn self__.whitespace;\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4389__auto__,k__4390__auto__){\r\nvar self__ = this;\r\nvar this__4389__auto____$1 = this;\r\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null], null), null),k__4390__auto__)){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4389__auto____$1),self__.__meta),k__4390__auto__);\r\n} else {\r\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4390__auto__)),null));\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4387__auto__,k__4388__auto__,G__67126){\r\nvar self__ = this;\r\nvar this__4387__auto____$1 = this;\r\nvar pred__67145 = cljs.core.keyword_identical_QMARK_;\r\nvar expr__67146 = k__4388__auto__;\r\nif(cljs.core.truth_((pred__67145.cljs$core$IFn$_invoke$arity$2 ? pred__67145.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),expr__67146) : pred__67145.call(null,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),expr__67146)))){\r\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(G__67126,self__.__meta,self__.__extmap,null));\r\n} else {\r\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4388__auto__,G__67126),null));\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4392__auto__){\r\nvar self__ = this;\r\nvar this__4392__auto____$1 = this;\r\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace,null))], null),self__.__extmap));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4379__auto__,G__67126){\r\nvar self__ = this;\r\nvar this__4379__auto____$1 = this;\r\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,G__67126,self__.__extmap,self__.__hash));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4385__auto__,entry__4386__auto__){\r\nvar self__ = this;\r\nvar this__4385__auto____$1 = this;\r\nif(cljs.core.vector_QMARK_(entry__4386__auto__)){\r\nreturn this__4385__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4386__auto__,(0)),cljs.core._nth(entry__4386__auto__,(1)));\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4385__auto____$1,entry__4386__auto__);\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.getBasis = (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"whitespace\",\"whitespace\",300496044,null)], null);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$type = true);\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrSeq = (function (this__4423__auto__){\r\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/WhitespaceNode\",null,(1),null));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrWriter = (function (this__4423__auto__,writer__4424__auto__){\r\nreturn cljs.core._write(writer__4424__auto__,\"rewrite-clj.node.whitespace/WhitespaceNode\");\r\n}));\r\n\r\n/**\r\n * Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode.\r\n */\r\nrewrite_clj.node.whitespace.__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$__GT_WhitespaceNode(whitespace){\r\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(whitespace,null,null,null));\r\n});\r\n\r\n/**\r\n * Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values.\r\n */\r\nrewrite_clj.node.whitespace.map__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$map__GT_WhitespaceNode(G__67131){\r\nvar extmap__4419__auto__ = (function (){var G__67150 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__67131,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483));\r\nif(cljs.core.record_QMARK_(G__67131)){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__67150);\r\n} else {\r\nreturn G__67150;\r\n}\r\n})();\r\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483).cljs$core$IFn$_invoke$arity$1(G__67131),null,cljs.core.not_empty(extmap__4419__auto__),null));\r\n});\r\n\r\n\r\n/**\r\n* @constructor\r\n * @implements {cljs.core.IRecord}\r\n * @implements {cljs.core.IKVReduce}\r\n * @implements {cljs.core.IEquiv}\r\n * @implements {cljs.core.IHash}\r\n * @implements {cljs.core.ICollection}\r\n * @implements {cljs.core.ICounted}\r\n * @implements {cljs.core.ISeqable}\r\n * @implements {cljs.core.IMeta}\r\n * @implements {cljs.core.ICloneable}\r\n * @implements {cljs.core.IPrintWithWriter}\r\n * @implements {cljs.core.IIterable}\r\n * @implements {rewrite_clj.node.protocols.Node}\r\n * @implements {cljs.core.IWithMeta}\r\n * @implements {cljs.core.IAssociative}\r\n * @implements {cljs.core.IMap}\r\n * @implements {cljs.core.ILookup}\r\n*/\r\nrewrite_clj.node.whitespace.NewlineNode = (function (newlines,__meta,__extmap,__hash){\r\nthis.newlines = newlines;\r\nthis.__meta = __meta;\r\nthis.__extmap = __extmap;\r\nthis.__hash = __hash;\r\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\r\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\r\n});\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.toString = (function (){\r\nvar self__ = this;\r\nvar this$ = this;\r\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4380__auto__,k__4381__auto__){\r\nvar self__ = this;\r\nvar this__4380__auto____$1 = this;\r\nreturn this__4380__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4381__auto__,null);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4382__auto__,k67152,else__4383__auto__){\r\nvar self__ = this;\r\nvar this__4382__auto____$1 = this;\r\nvar G__67156 = k67152;\r\nvar G__67156__$1 = (((G__67156 instanceof cljs.core.Keyword))?G__67156.fqn:null);\r\nswitch (G__67156__$1) {\r\ncase \"newlines\":\r\nreturn self__.newlines;\r\n\r\nbreak;\r\ndefault:\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k67152,else__4383__auto__);\r\n\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4399__auto__,f__4400__auto__,init__4401__auto__){\r\nvar self__ = this;\r\nvar this__4399__auto____$1 = this;\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4402__auto__,p__67157){\r\nvar vec__67158 = p__67157;\r\nvar k__4403__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67158,(0),null);\r\nvar v__4404__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__67158,(1),null);\r\nreturn (f__4400__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4400__auto__.cljs$core$IFn$_invoke$arity$3(ret__4402__auto__,k__4403__auto__,v__4404__auto__) : f__4400__auto__.call(null,ret__4402__auto__,k__4403__auto__,v__4404__auto__));\r\n}),init__4401__auto__,this__4399__auto____$1);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4394__auto__,writer__4395__auto__,opts__4396__auto__){\r\nvar self__ = this;\r\nvar this__4394__auto____$1 = this;\r\nvar pr_pair__4397__auto__ = (function (keyval__4398__auto__){\r\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4396__auto__,keyval__4398__auto__);\r\n});\r\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,pr_pair__4397__auto__,\"#rewrite-clj.node.whitespace.NewlineNode{\",\", \",\"}\",opts__4396__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines],null))], null),self__.__extmap));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__67151){\r\nvar self__ = this;\r\nvar G__67151__$1 = this;\r\nreturn (new cljs.core.RecordIter((0),G__67151__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4378__auto__){\r\nvar self__ = this;\r\nvar this__4378__auto____$1 = this;\r\nreturn self__.__meta;\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4375__auto__){\r\nvar self__ = this;\r\nvar this__4375__auto____$1 = this;\r\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,self__.__extmap,self__.__hash));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4384__auto__){\r\nvar self__ = this;\r\nvar this__4384__auto____$1 = this;\r\nreturn (1 + cljs.core.count(self__.__extmap));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4376__auto__){\r\nvar self__ = this;\r\nvar this__4376__auto____$1 = this;\r\nvar h__4238__auto__ = self__.__hash;\r\nif((!((h__4238__auto__ == null)))){\r\nreturn h__4238__auto__;\r\n} else {\r\nvar h__4238__auto____$1 = (function (coll__4377__auto__){\r\nreturn (979711303 ^ cljs.core.hash_unordered_coll(coll__4377__auto__));\r\n})(this__4376__auto____$1);\r\n(self__.__hash = h__4238__auto____$1);\r\n\r\nreturn h__4238__auto____$1;\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this67153,other67154){\r\nvar self__ = this;\r\nvar this67153__$1 = this;\r\nreturn (((!((other67154 == null)))) && ((this67153__$1.constructor === other67154.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this67153__$1.newlines,other67154.newlines)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this67153__$1.__extmap,other67154.__extmap)));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn true;\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nthrow (new Error(\"Unsupported operation\"));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn rewrite_clj.node.whitespace._STAR_count_fn_STAR_.call(null,self__.newlines);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\r\nvar self__ = this;\r\nvar ___$1 = this;\r\nreturn rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.call(null,self__.newlines);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4389__auto__,k__4390__auto__){\r\nvar self__ = this;\r\nvar this__4389__auto____$1 = this;\r\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),null], null), null),k__4390__auto__)){\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4389__auto____$1),self__.__meta),k__4390__auto__);\r\n} else {\r\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4390__auto__)),null));\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4387__auto__,k__4388__auto__,G__67151){\r\nvar self__ = this;\r\nvar this__4387__auto____$1 = this;\r\nvar pred__67164 = cljs.core.keyword_identical_QMARK_;\r\nvar expr__67165 = k__4388__auto__;\r\nif(cljs.core.truth_((pred__67164.cljs$core$IFn$_invoke$arity$2 ? pred__67164.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),expr__67165) : pred__67164.call(null,new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),expr__67165)))){\r\nreturn (new rewrite_clj.node.whitespace.NewlineNode(G__67151,self__.__meta,self__.__extmap,null));\r\n} else {\r\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4388__auto__,G__67151),null));\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4392__auto__){\r\nvar self__ = this;\r\nvar this__4392__auto____$1 = this;\r\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines,null))], null),self__.__extmap));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4379__auto__,G__67151){\r\nvar self__ = this;\r\nvar this__4379__auto____$1 = this;\r\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,G__67151,self__.__extmap,self__.__hash));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4385__auto__,entry__4386__auto__){\r\nvar self__ = this;\r\nvar this__4385__auto____$1 = this;\r\nif(cljs.core.vector_QMARK_(entry__4386__auto__)){\r\nreturn this__4385__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4386__auto__,(0)),cljs.core._nth(entry__4386__auto__,(1)));\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4385__auto____$1,entry__4386__auto__);\r\n}\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.getBasis = (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"newlines\",\"newlines\",455080009,null)], null);\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$type = true);\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrSeq = (function (this__4423__auto__){\r\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/NewlineNode\",null,(1),null));\r\n}));\r\n\r\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrWriter = (function (this__4423__auto__,writer__4424__auto__){\r\nreturn cljs.core._write(writer__4424__auto__,\"rewrite-clj.node.whitespace/NewlineNode\");\r\n}));\r\n\r\n/**\r\n * Positional factory function for rewrite-clj.node.whitespace/NewlineNode.\r\n */\r\nrewrite_clj.node.whitespace.__GT_NewlineNode = (function rewrite_clj$node$whitespace$__GT_NewlineNode(newlines){\r\nreturn (new rewrite_clj.node.whitespace.NewlineNode(newlines,null,null,null));\r\n});\r\n\r\n/**\r\n * Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values.\r\n */\r\nrewrite_clj.node.whitespace.map__GT_NewlineNode = (function rewrite_clj$node$whitespace$map__GT_NewlineNode(G__67155){\r\nvar extmap__4419__auto__ = (function (){var G__67169 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__67155,new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518));\r\nif(cljs.core.record_QMARK_(G__67155)){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__67169);\r\n} else {\r\nreturn G__67169;\r\n}\r\n})();\r\nreturn (new rewrite_clj.node.whitespace.NewlineNode(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518).cljs$core$IFn$_invoke$arity$1(G__67155),null,cljs.core.not_empty(extmap__4419__auto__),null));\r\n});\r\n\r\n/**\r\n * Create whitespace node.\r\n */\r\nrewrite_clj.node.whitespace.whitespace_node = (function rewrite_clj$node$whitespace$whitespace_node(s){\r\nreturn rewrite_clj.node.whitespace.__GT_WhitespaceNode(s);\r\n});\r\n/**\r\n * Create newline node.\r\n */\r\nrewrite_clj.node.whitespace.newline_node = (function rewrite_clj$node$whitespace$newline_node(s){\r\nreturn rewrite_clj.node.whitespace.__GT_NewlineNode(s);\r\n});\r\n/**\r\n * Check whether a character represents a linebreak.\r\n */\r\nrewrite_clj.node.whitespace.newline_QMARK_ = (function rewrite_clj$node$whitespace$newline_QMARK_(c){\r\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\"\\n\",null,\"\\r\",null], null), null),c);\r\n});\r\n/**\r\n * Convert a string of whitespace to whitespace/newline nodes.\r\n */\r\nrewrite_clj.node.whitespace.whitespace_nodes = (function rewrite_clj$node$whitespace$whitespace_nodes(s){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (char_seq){\r\nvar s__$1 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,char_seq);\r\nif(rewrite_clj.node.whitespace.newline_QMARK_(cljs.core.first(char_seq))){\r\nreturn rewrite_clj.node.whitespace.newline_node(s__$1);\r\n} else {\r\nreturn rewrite_clj.node.whitespace.whitespace_node(s__$1);\r\n}\r\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace.newline_QMARK_,s));\r\n});\r\n/**\r\n * Create node representing the given number of spaces.\r\n */\r\nrewrite_clj.node.whitespace.spaces = (function rewrite_clj$node$whitespace$spaces(n){\r\nreturn rewrite_clj.node.whitespace.whitespace_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\" \")));\r\n});\r\n/**\r\n * Create node representing the given number of newline characters.\r\n */\r\nrewrite_clj.node.whitespace.newlines = (function rewrite_clj$node$whitespace$newlines(n){\r\nreturn rewrite_clj.node.whitespace.newline_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\"\\n\")));\r\n});\r\nvar comma_67221 = rewrite_clj.node.whitespace.whitespace_node(\", \");\r\n/**\r\n * Interleave the given seq of nodes with `\", \"` nodes.\r\n */\r\nrewrite_clj.node.whitespace.comma_separated = (function rewrite_clj$node$whitespace$comma_separated(nodes){\r\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(comma_67221)));\r\n});\r\nvar nl_67222 = rewrite_clj.node.whitespace.newline_node(\"\\n\");\r\n/**\r\n * Interleave the given seq of nodes with newline nodes.\r\n */\r\nrewrite_clj.node.whitespace.line_separated = (function rewrite_clj$node$whitespace$line_separated(nodes){\r\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(nl_67222)));\r\n});\r\nvar space_67224 = rewrite_clj.node.whitespace.whitespace_node(\" \");\r\n/**\r\n * Interleave the given seq of nodes with `\" \"` nodes.\r\n */\r\nrewrite_clj.node.whitespace.space_separated = (function rewrite_clj$node$whitespace$space_separated(nodes){\r\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(space_67224)));\r\n});\r\n/**\r\n * Check whether a node represents whitespace.\r\n */\r\nrewrite_clj.node.whitespace.whitespace_QMARK_ = (function rewrite_clj$node$whitespace$whitespace_QMARK_(node){\r\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),null], null), null),rewrite_clj.node.protocols.tag(node));\r\n});\r\n/**\r\n * Check whether a ndoe represents linebreaks.\r\n */\r\nrewrite_clj.node.whitespace.linebreak_QMARK_ = (function rewrite_clj$node$whitespace$linebreak_QMARK_(node){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.tag(node),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/whitespace.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",32],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.whitespace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node.protocols","^O","~$node","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Q","^Q"],"~:form",["~#list",["~$ns","^J",["^X",["^T",["^O","~:as","^P"]]]]],"~:flags",["^ ","^T",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/whitespace.cljs"],"~:compiled-at",1635492902775,"~:resource-name","rewrite_clj/node/whitespace.cljs","~:warnings",[],"~:source","(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.node.whitespace/*newline-fn*","cljs.core/identity","rewrite-clj.node.whitespace/*count-fn*","cljs.core/count","this__4380__auto__","k__4381__auto__","this__4382__auto__","k67127","else__4383__auto__","G__67134","cljs.core/Keyword","whitespace","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__67135","vec__67137","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__67126","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this67128","other67129","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__67145","cljs.core/keyword-identical?","expr__67146","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.whitespace/WhitespaceNode","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__67131","extmap__4419__auto__","G__67150","cljs.core/record?","rewrite-clj.node.whitespace/->WhitespaceNode","rewrite-clj.node.whitespace/map->WhitespaceNode","_","js/Error","this","k67152","G__67156","newlines","p__67157","vec__67158","G__67151","this67153","other67154","pred__67164","expr__67165","rewrite-clj.node.whitespace/NewlineNode","G__67155","G__67169","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","rewrite-clj.node.whitespace/whitespace-node","s","rewrite-clj.node.whitespace/newline-node","rewrite-clj.node.whitespace/newline?","c","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core.partition_by","cljs.core.map","char-seq","cljs.core.apply","cljs.core/str","cljs.core/first","rewrite-clj.node.whitespace/spaces","n","cljs.core.repeat","rewrite-clj.node.whitespace/newlines","comma","rewrite-clj.node.whitespace/comma-separated","nodes","cljs.core/butlast","cljs.core.interleave","nl","rewrite-clj.node.whitespace/line-separated","space","rewrite-clj.node.whitespace/space-separated","rewrite-clj.node.whitespace/whitespace?","node","rewrite-clj.node.protocols/tag","rewrite-clj.node.whitespace/linebreak?"]],"~:used-vars",["^H",["~$cljs.core/PROTOCOL_SENTINEL","~$rewrite-clj.node.whitespace/*count-fn*","~$rewrite-clj.node.whitespace/spaces","~$cljs.core/str","~$cljs.core/pr-sequential-writer","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/-assoc","~$rewrite-clj.node.protocols/tag","~$cljs.core/-write","~$cljs.core/-iterator","~$rewrite-clj.node.whitespace/->NewlineNode","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/identity","~$rewrite-clj.node.whitespace/newline?","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$rewrite-clj.node.whitespace/NewlineNode","~$cljs.core/-with-meta","~$cljs.core/concat","~$rewrite-clj.node.whitespace/*newline-fn*","~$rewrite-clj.node.whitespace/WhitespaceNode","~$rewrite-clj.node.whitespace/whitespace?","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/-conj","~$rewrite-clj.node.whitespace/space-separated","~$cljs.core/map","~$rewrite-clj.node.whitespace/comma-separated","~$cljs.core/PersistentVector","~$cljs.core/List","~$cljs.core/get","~$rewrite-clj.node.whitespace/newlines","~$cljs.core/partition-by","~$cljs.core/-nth","~$rewrite-clj.node.whitespace/map->WhitespaceNode","~$cljs.core/not-empty","~$cljs.core/-lookup","~$rewrite-clj.node.whitespace/whitespace-nodes","~$cljs.core/nil-iter","~$cljs.core/interleave","~$cljs.core/RecordIter","~$rewrite-clj.node.protocols/string","~$cljs.core/not","~$rewrite-clj.node.whitespace/newline-node","~$cljs.core/assoc","~$rewrite-clj.node.whitespace/map->NewlineNode","~$rewrite-clj.node.whitespace/line-separated","~$rewrite-clj.node.whitespace/linebreak?","~$cljs.core/repeat","~$cljs.core/first","~$cljs.core/butlast","~$rewrite-clj.node.whitespace/->WhitespaceNode","~$js/Error","~$rewrite-clj.node.whitespace/whitespace-node"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^13","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","~$goog.array","~$goog.asserts"]]],["^13","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^13","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2X"]]],["^13","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U"]]],["^13","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U"]]],"~:SHADOW-TIMESTAMP",[1628596618000,1628596618000,1620929005000],["^13","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U","~$goog.html.trustedtypes","^2[","^30","^31","^32"]]],["^13","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","^2U","~$goog.html.SafeUrl","^31","^32","^2X"]]],["^13","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^36","^2Z","~$goog.html.uncheckedconversions","^31","^2X"]]],["^13","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","^2U","~$goog.dom.TagName","~$goog.dom.tags","^3:","^3;","~$goog.html.SafeStyleSheet","^36","^2Z","^35","^2[","^30","~$goog.labs.userAgent.browser","^2W","^31","^32","^2X"]]],["^13","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2W"]]],["^13","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","^2U","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","rewrite_clj/node/protocols.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^Q","~$clojure.string"]]],["^13","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",[]]],["^13","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","^2W"]]],["^13","rewrite_clj/node/whitespace.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^Q","^O"]]],["^13","clojure/string.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^Q","^3E","~$goog.string.StringBuffer"]]],["^13","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","~$goog.dom.safe","^3<","^31","^2X"]]],["^13","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2X"]]],["^13","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","^2U","^38","~$goog.math"]]],["^13","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U","^39","^3:","^3;","^3A","^36","^2Z","^31","^2X"]]],["^13","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R"]]],["^13","cljs/core.cljs"],["16d93c2274e5f02773c418ade96d56ba9a02d17e","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","~$goog.math.Long","~$goog.math.Integer","^3E","^2W","^2T","~$goog.Uri","^3L"]]],["^13","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U","^35","^31","^32"]]],["^13","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","^2U","^3;","^2W","^31","^32","^2X"]]],["^13","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^34"]]],["^13","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2T","^2U","^3E"]]],["^13","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2O",["^ ","^2P",null,"^2Q",["^H",[]],"^2R",["^R","^2U","^32"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1614513934000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1614513934000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map.clj",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1614513934000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1614407951000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1614407951000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1614407951000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1614407935000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/js_deps.cljc",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/util.cljc",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/core.cljc",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/externs.clj",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64_vlq.clj",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/analyzer.cljc",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1614513934000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/compiler.cljc",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1614513934000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1614513934000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1614407951000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/tagged_literals.cljc",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1614513934000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/source_map/base64.clj",1620929005000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1614407951000,"jar:file:/C:/Users/lenovo/.m2/repository/org/clojure/clojurescript/1.10.764/clojurescript-1.10.764.jar!/cljs/env.cljc",1620929005000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",1,"^8",5,"^9",1,"^:",32],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^H",["^T"]],"~:shadow/js-access-global",["^H",["Error"]],"^U",null,"~:defs",["^ ","~$->NewlineNode",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^8",12,"~:internal-ctor",true,"~:factory","~:positional","^7",41,"^9",41,"~:arglists",["^X",["~$quote",["^X",[["~$newlines"]]]]],"~:doc","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"^I","^1J","^6","rewrite_clj/node/whitespace.cljs","^:",23,"~:method-params",["^X",[["^4I"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^8",1,"^4D",true,"~:variadic?",false,"^4E","^4F","^7",41,"~:ret-tag","^1S","^9",41,"~:max-fixed-arity",1,"~:fn-var",true,"^4G",["^X",["^4H",["^X",[["^4I"]]]]],"^4J","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"~$WhitespaceNode",["^ ","~:num-fields",1,"~:protocols",["^H",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^I","^1W","^6","rewrite_clj/node/whitespace.cljs","^:",26,"~:type",true,"^8",12,"^4D",true,"^7",29,"~:record",true,"^9",29,"~:tag","~$function","~:skip-protocol-flag",["^H",["^4U","^4V","^4W","^4X","^4Y","^4[","^50","^51","^52","^53","^54","^56","^57","^58","^59"]]],"~$whitespace?",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",120,"^8",7,"^9",120,"^:",18,"^4G",["^X",["^4H",["^X",[["^P"]]]]],"^4J","Check whether a node represents whitespace."],"^I","^1X","^6","rewrite_clj/node/whitespace.cljs","^:",18,"^4K",["^X",[["^P"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",120,"^4O","~$boolean","^9",120,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^P"]]]]],"^4J","Check whether a node represents whitespace."],"~$whitespace-node",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",60,"^8",7,"^9",60,"^:",22,"^4G",["^X",["^4H",["^X",[["~$s"]]]]],"^4J","Create whitespace node."],"^I","^2L","^6","rewrite_clj/node/whitespace.cljs","^:",22,"^4K",["^X",[["~$s"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",60,"^4O","^1W","^9",60,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["~$s"]]]]],"^4J","Create whitespace node."],"~$space-separated",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",113,"^8",9,"^9",113,"^:",24,"^4G",["^X",["^4H",["^X",[["~$nodes"]]]]],"^4J","Interleave the given seq of nodes with `\" \"` nodes."],"^I","^20","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^4K",["^X",[["^5C"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",3,"^4N",false,"^7",113,"^4O","~$seq","^9",113,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^5C"]]]]],"^4J","Interleave the given seq of nodes with `\" \"` nodes."],"~$linebreak?",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",128,"^8",7,"^9",128,"^:",17,"^4G",["^X",["^4H",["^X",[["^P"]]]]],"^4J","Check whether a ndoe represents linebreaks."],"^I","^2F","^6","rewrite_clj/node/whitespace.cljs","^:",17,"^4K",["^X",[["^P"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",128,"^4O","^5@","^9",128,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^P"]]]]],"^4J","Check whether a ndoe represents linebreaks."],"~$*count-fn*",["^ ","^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",10,"^8",16,"^9",10,"^:",26,"~:dynamic",true],"^I","^1@","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",1,"^5G",true,"^7",10,"^9",10,"^5<","~$any","^4J","This function is applied to every newline string and should produce\n   the eventual character count."],"~$comma-separated",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",101,"^8",9,"^9",101,"^:",24,"^4G",["^X",["^4H",["^X",[["^5C"]]]]],"^4J","Interleave the given seq of nodes with `\", \"` nodes."],"^I","^22","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^4K",["^X",[["^5C"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",3,"^4N",false,"^7",101,"^4O","^5D","^9",101,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^5C"]]]]],"^4J","Interleave the given seq of nodes with `\", \"` nodes."],"~$map->WhitespaceNode",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",12,"^4D",true,"^4E","~:map","^7",29,"^9",29,"^4G",["^X",["^4H",["^X",[["~$G__67131"]]]]],"^4J","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^I","^29","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^4K",["^X",[["^5L"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4D",true,"^4N",false,"^4E","^5K","^7",29,"^4O","^1W","^9",29,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^5L"]]]]],"^4J","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^4I",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",93,"^8",7,"^9",93,"^:",15,"^4G",["^X",["^4H",["^X",[["~$n"]]]]],"^4J","Create node representing the given number of newline characters."],"^I","^26","^6","rewrite_clj/node/whitespace.cljs","^:",15,"^4K",["^X",[["~$n"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",93,"^4O","^1S","^9",93,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["~$n"]]]]],"^4J","Create node representing the given number of newline characters."],"~$whitespace-nodes",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",75,"^8",7,"^9",75,"^:",23,"^4G",["^X",["^4H",["^X",[["~$s"]]]]],"^4J","Convert a string of whitespace to whitespace/newline nodes."],"^I","^2<","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^4K",["^X",[["~$s"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",75,"^4O","~$cljs.core/LazySeq","^9",75,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["~$s"]]]]],"^4J","Convert a string of whitespace to whitespace/newline nodes."],"~$NewlineNode",["^ ","^4S",1,"^4T",["^H",["^4U","^4V","^4W","^4X","^4Y","^4Z","^4[","^50","^51","^52","^53","^54","^55","^56","^57","^58","^59"]],"^I","^1S","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^5:",true,"^8",12,"^4D",true,"^7",41,"^5;",true,"^9",41,"^5<","^5=","^5>",["^H",["^4U","^4V","^4W","^4X","^4Y","^4[","^50","^51","^52","^53","^54","^56","^57","^58","^59"]]],"~$newline-node",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",65,"^8",7,"^9",65,"^:",19,"^4G",["^X",["^4H",["^X",[["~$s"]]]]],"^4J","Create newline node."],"^I","^2B","^6","rewrite_clj/node/whitespace.cljs","^:",19,"^4K",["^X",[["~$s"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",65,"^4O","^1S","^9",65,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["~$s"]]]]],"^4J","Create newline node."],"~$*newline-fn*",["^ ","^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",6,"^8",16,"^9",6,"^:",28,"^5G",true],"^I","^1V","^6","rewrite_clj/node/whitespace.cljs","^:",28,"^8",1,"^5G",true,"^7",6,"^9",6,"^5<","^5H","^4J","This function is applied to every newline string."],"~$newline?",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",70,"^8",8,"^9",70,"^:",16,"~:private",true,"^4G",["^X",["^4H",["^X",[["~$c"]]]]],"^4J","Check whether a character represents a linebreak."],"^5S",true,"^I","^1P","^6","rewrite_clj/node/whitespace.cljs","^:",16,"^4K",["^X",[["~$c"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",70,"^4O","^5@","^9",70,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["~$c"]]]]],"^4J","Check whether a character represents a linebreak."],"~$->WhitespaceNode",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",12,"^4D",true,"^4E","^4F","^7",29,"^9",29,"^4G",["^X",["^4H",["^X",[["~$whitespace"]]]]],"^4J","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"^I","^2J","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^4K",["^X",[["^5U"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4D",true,"^4N",false,"^4E","^4F","^7",29,"^4O","^1W","^9",29,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^5U"]]]]],"^4J","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"~$spaces",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",88,"^8",7,"^9",88,"^:",13,"^4G",["^X",["^4H",["^X",[["~$n"]]]]],"^4J","Create node representing the given number of spaces."],"^I","^1A","^6","rewrite_clj/node/whitespace.cljs","^:",13,"^4K",["^X",[["~$n"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4N",false,"^7",88,"^4O","^1W","^9",88,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["~$n"]]]]],"^4J","Create node representing the given number of spaces."],"~$map->NewlineNode",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^8",12,"^4D",true,"^4E","^5K","^7",41,"^9",41,"^4G",["^X",["^4H",["^X",[["~$G__67155"]]]]],"^4J","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"^I","^2D","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^4K",["^X",[["^5X"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",1,"^4D",true,"^4N",false,"^4E","^5K","^7",41,"^4O","^1S","^9",41,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^5X"]]]]],"^4J","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"~$line-separated",["^ ","^4C",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",107,"^8",9,"^9",107,"^:",23,"^4G",["^X",["^4H",["^X",[["^5C"]]]]],"^4J","Interleave the given seq of nodes with newline nodes."],"^I","^2E","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^4K",["^X",[["^5C"]]],"^4L",null,"^4M",["^X",[null,null]],"^8",3,"^4N",false,"^7",107,"^4O","^5D","^9",107,"^4P",1,"^4Q",true,"^4G",["^X",["^4H",["^X",[["^5C"]]]]],"^4J","Interleave the given seq of nodes with newline nodes."]],"^V",["^ ","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^S",["^H",["~:newlines","~:whitespace","^4I","^5U","~:newline"]],"~:order",["^60","^5U","^5[","^61","^4I"]],"^[",["^ ","^T",["^H",[]]],"^10",["^ "],"^11",["^R","^Q","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2N",[["^65","~:static-fns"],true,["^65","~:shadow-tweaks"],null,["^65","~:source-map-inline"],null,["^65","~:elide-asserts"],false,["^65","~:optimize-constants"],null,["^65","^16"],null,["^65","~:external-config"],null,["^65","~:tooling-config"],null,["^65","~:emit-constants"],null,["^65","~:load-tests"],null,["^65","~:form-size-threshold"],null,["^65","~:data-readers"],null,["^65","~:infer-externs"],"~:auto",["^65","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^65","~:fn-invoke-direct"],null,["^65","~:source-map"],"/dev/null"]]]